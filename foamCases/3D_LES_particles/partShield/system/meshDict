/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                |
| \\      /  F ield         | cfMesh: A library for mesh generation          | 
|  \\    /   O peration     |                                                |
|   \\  /    A nd           | Author: Franjo Juretic                         | 
|    \\/     M anipulation  | E-mail: franjo.juretic@c-fields.com            |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version   2.0;
    format    ascii;
    class     dictionary;
    location  "system";
    object    meshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Guidance: https://www.cfd-online.com/Forums/openfoam-community-contributions/198872-general-workflow-create-flawless-mesh-cfmesh.html

surfaceFile         "combined.stl";

// global mesh size
maxCellSize	       15.04;           // perturb the mesh by ~ 0.001-0.01 increments

// region (local) mesh refinement
objectRefinements
{  
    headRefine
    {
        type        box;
        cellSize    6.0;
        centre      (0 0 0);
        lengthX     200;
        lengthY     250;
        lengthZ     300;
    }

    nostrilRefine
    {
        type        box;
        cellSize    3.0;            // nostrils' geometry resolution is stepwise
        centre      (0 100 20);
        lengthX     15;
        lengthY     15;
        lengthZ     15;
    }
}

workflowControls
{
    //stopAfter         edgeExtraction;
}

renameBoundary
{
    defaultType     wall;

    newPatchNames
    {
        "top"       { newName interfaceShield  ; type  patch; }
        "bottom"    { newName interfaceShield  ; type  patch; }
        "sideL"     { newName interfaceShield  ; type  patch; }
        "sideR"     { newName interfaceShield  ; type  patch; }
        "front"     { newName interfaceShield  ; type  patch; }
        "back"      { newName atmos      ; type  patch; }
    }
}

// ************************************************************************* //