/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    #includeEtc "caseDicts/setConstraintTypes"

    /* meanAxialVelocity value used is conservative approximation of real
     * measurements: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8663001
     * fluctuationScale was determined by varying value then visually 
     * inspecting aerosol's cloud outline to find best shape agreement with 
     * real images. See our custom boundary condition code for more details 
     * of these parameters.
     */
    mouth                     
    {
        type                    mouthInletVel;
        meanAxialVelocity       0.5;
        fluctuationScale        1.25;
        diffRandVelAcrossCases  0;                  // 1 = yes, 0 = no

    }

    /* Values used approximated from measurements: 
     * https://onlinelibrary.wiley.com/doi/10.1111/j.1600-0668.2009.00623.x
     * Breathing rate (velocity) thru nostrils approximated as sine function.
     */
    nostrils                                 
    {
        type            codedFixedValue;            // custom-coded BC
        value           uniform (0 0 0);            // initialization (for ParaView only)
        name            customNostrilBC;

        codeOptions                                 // compilation options
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

        codeInclude                                 // required files
        #{
            #include <cmath>
            #include <iostream>
            #include "mathematicalConstants.H"
        #};

        code                                        // executes every time-step (deltaT)
        #{
            const scalar angle = 40;                // from vertical (not theta)
            const scalar velAmp = 5.0; 

            // required
            const scalar Pi = 3.14;
            const scalar angleRad = angle * Pi / 180;
            const vectorField& Cf = patch().Cf();   // coordinates of the face's center in a patch
            vectorField& field = *this;             // initialize where we are going to assign the profile
            scalar t = this->db().time().value();   // current time

            // velocity components
            scalar velMag       = velAmp * sin(t);
            scalar velDown      = velMag * cos(angleRad);
            scalar velForward   = -velMag * sin(angleRad);
            scalar velSideways;

            forAll(Cf, faceI)                       // loop over faces in patch
            {
                scalar sideways_i = Cf[faceI].x();
                if (sideways_i < 0)                 // each nostril's sideways velocity direction
                {
                    velSideways = -velForward;
                } 
                else 
                {
                    velSideways = velForward;
                } 

                // assign velocity components at nostrils surface
                field[faceI] = vector(velSideways, velForward, velDown);
            }
        #};
    }
    person
    {
        type            noSlip;
    }
    wall
    {
        type            noSlip;
    }
    atmos
    {
        type            noSlip;
    }
    atmosEnd
    {
        type            zeroGradient;
    }
    iFaceDownstream
    {
        type            zeroGradient;
    }
    iFaceUpstr
    {
        type            zeroGradient;
    }
    iFaceDownCube
    {
        type            zeroGradient;
    }
    iFaceCube
    {
        type            zeroGradient;
    }
}


// ************************************************************************* //